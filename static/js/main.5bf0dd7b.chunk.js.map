{"version":3,"sources":["Components/frontend/frontpage.js","App.js","serviceWorker.js","index.js"],"names":["monthlyEmi","loanAmount","interest","tenure","rateOfInt","paymentTenure","length","Math","pow","floor","Frontpage","props","inputHandleChange","e","setState","target","name","value","calculateEmi","preventDefault","state","monthlyEmiAmount","bind","this","resultNumbers","totalAmt","interestAmt","Object","assign","loanAmt","formatMonthlyEmi","formatTotalAmt","formatinterestAmt","Fragment","class","TextField","id","label","color","onChange","Button","variant","onClick","React","Component","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAsIMA,EAAa,SAACC,EAAYC,EAAUC,GACxC,IAAIC,EAAYF,EAAS,IAAI,GACzBG,EAAuB,GAAPF,EAChBG,EAASC,KAAKC,IAAI,EAAEJ,EAAWC,GAEnC,OADqBE,KAAKE,MAAOR,EAAWK,EAAOF,GAAYE,EAAO,KAqFzDI,E,kDA9EZ,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAURC,kBAAoB,SAACC,GACnB,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAbV,EAiBpBC,aAAe,SAACL,GACdA,EAAEM,iBAED,IAAMlB,EAAW,EAAKmB,MAAMnB,WACtBE,EAAO,EAAKiB,MAAMjB,OAClBC,EAAU,EAAKgB,MAAMhB,UAE5B,EAAKU,SAAS,CACZO,iBAAkBrB,EAAWC,EAAYG,EAAWD,MAvBtD,EAAKiB,MAAQ,CACXnB,WAAY,GACZE,OAAQ,GACRC,UAAW,GACXiB,iBAAkB,IAEpB,EAAKH,aAAe,EAAKA,aAAaI,KAAlB,gBACpB,EAAKV,kBAAoB,EAAKA,kBAAkBU,KAAvB,gBATP,E,qDA8BlB,IAAMrB,EAAWsB,KAAKH,MAAMnB,WACrBE,EAAOoB,KAAKH,MAAMjB,OAClBkB,EAAiBE,KAAKH,MAAMC,iBAC3BG,EAAgB,GAGjBC,EAAWlB,KAAKE,MAAMY,EAAmBA,GAA2B,GAAPlB,GAAa,GAC3EuB,EAAcnB,KAAKE,MAAMgB,EAAWA,EAAWxB,EAAa,GASlE,OAPCuB,EAAgBG,OAAOC,OAAOJ,EAAe,CAC5CK,QAAS5B,EACT6B,iBAAiBT,EACjBU,eAAgBN,EAChBO,kBAAkBN,IAIlB,kBAAC,IAAMO,SAAP,KACA,+CACA,yDACC,yBAAKC,MAAM,mBACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,YACP,0BAAMA,MAAM,QAEP,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAgBC,MAAM,mBAAmBC,MAAM,YAAYtB,KAAK,aAAauB,SAAUhB,KAAKX,oBAAoB,6BAC9H,kBAACuB,EAAA,EAAD,CAAWC,GAAG,qBAAqBC,MAAM,sBAAsBC,MAAM,YAAYtB,KAAK,SAASuB,SAAUhB,KAAKX,oBAAqB,6BAClI,kBAACuB,EAAA,EAAD,CAAWC,GAAG,qBAAqBC,MAAM,qBAAqBC,MAAM,YAAYtB,KAAK,YAAYuB,SAAUhB,KAAKX,oBAEhH,yBAAKsB,MAAM,kBACd,kBAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYH,MAAM,UAAUI,QAASnB,KAAKL,cAA1D,kBAIN,yBAAKgB,MAAM,YACT,yBAAKE,GAAG,UACN,4BAAI,0BAAMF,MAAM,uBAAZ,kBAAkDjC,IACtD,4BAAI,0BAAMiC,MAAM,uBAAZ,mBAAmDb,IACvD,4BAAI,0BAAMa,MAAM,uBAAZ,+BAA+DR,IACnE,4BAAI,0BAAMQ,MAAM,uBAAZ,4BAA4DT,a,GAtExDkB,IAAMC,W,qBClIfC,MARf,WACE,OACE,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWtC,MCGpBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5bf0dd7b.chunk.js","sourcesContent":["/*import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ResultBlock from '../Result/resultBlock';\r\n\r\n\r\nconst monthlyEmi = (loanAmount, interest, tenure) => {\r\n  let rateOfInt = interest/100/12;\r\n  let paymentTenure = tenure*12;\r\n  let length = Math.pow(1+rateOfInt, paymentTenure);\r\n  let monthlyPayable = Math.floor((loanAmount*length*rateOfInt)/(length-1));\r\n  return monthlyPayable;\r\n}\r\n\r\nclass LandingPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loanAmount: '',\r\n      tenure: '',\r\n      rateOfInt: '',\r\n      monthlyEmiAmount: ''\r\n    }\r\n    this.calculateEmi = this.calculateEmi.bind(this);\r\n    this.inputHandleChange = this.inputHandleChange.bind(this);\r\n    \r\n  }\r\n\r\n  // On input change\r\n  inputHandleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  // On calculate Btn click\r\n  calculateEmi = (e) => {\r\n    e.preventDefault();\r\n    \r\n     const loanAmount=this.state.loanAmount;\r\n     const tenure=this.state.tenure;\r\n     const rateOfInt=this.state.rateOfInt;\r\n    \r\n\r\n    this.setState({\r\n      monthlyEmiAmount: monthlyEmi(loanAmount, rateOfInt, tenure),\r\n    });\r\n  }\r\n\r\n  // Number formatting \r\n // numberFormat = (num) => {\r\n //   return num.toString().replace(/(\\d)(?=(\\d\\d)+\\d$)/g, \"$1,\");\r\n    // return num.replace(/['\"]+/g, '');\r\n//  }\r\n\r\n  // Reset input fields\r\n \r\n\r\n  render() {\r\n    const loanAmount=this.state.loanAmount;\r\n     const tenure=this.state.tenure;\r\n     const monthlyEmiAmount=this.state.monthlyEmiAmount;\r\n    \r\n\r\n   let resultNumbers = {}\r\n  //  let resultChartNumbers = {}\r\n\r\n    const totalAmt = Math.floor(monthlyEmiAmount ? monthlyEmiAmount * (tenure*12) : 0);\r\n    const interestAmt = Math.floor(totalAmt ? totalAmt - loanAmount : 0);\r\n\r\n    // Formatting numbers and assiging to an object\r\n    resultNumbers = Object.assign(resultNumbers, {\r\n      loanAmt: loanAmount,\r\n      formatMonthlyEmi:monthlyEmiAmount,\r\n      formatTotalAmt: totalAmt,\r\n      formatinterestAmt:interestAmt\r\n    });\r\n \r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Container p={0} className={'emi-calci'} maxWidth=\"md\">\r\n          <h1 align={\"center\"} m={0}>Personal Loan EMI calci</h1>\r\n          <Grid container spacing={1}>\r\n            <Grid container xs={12} sm={4} md={4} spacing={4} item>\r\n              <form noValidate autoComplete=\"off\">\r\n                <TextField \r\n                  id=\"standard-secondary\"\r\n                  label=\"Loan Amount\" \r\n                  color=\"secondary\"\r\n                  name=\"loanAmount\"\r\n                  onChange={this.inputHandleChange}\r\n                />\r\n                <TextField\r\n                  id=\"standard-secondary\"\r\n                  label=\"Tenure (Years)\" \r\n                  color=\"secondary\"\r\n                  name=\"tenure\"\r\n                  onChange={this.inputHandleChange}\r\n                />\r\n                <TextField\r\n                  id=\"standard-secondary\"\r\n                  label=\"Rate on Interest (%)\" \r\n                  color=\"secondary\"\r\n                  name=\"rateOfInt\"\r\n                  onChange={this.inputHandleChange}\r\n                />\r\n                <div className={'operation-btns'}>\r\n                  <Button variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={this.calculateEmi}\r\n                  >\r\n                    Calculate\r\n                  </Button>\r\n                  \r\n                </div>\r\n              </form>\r\n            </Grid>\r\n            <ResultBlock resultNumbers={resultNumbers} />\r\n          </Grid>\r\n        </Container>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LandingPage;*/\r\n\r\nimport React from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst monthlyEmi = (loanAmount, interest, tenure) => {\r\n  let rateOfInt = interest/100/12;\r\n  let paymentTenure = tenure*12;\r\n  let length = Math.pow(1+rateOfInt, paymentTenure);\r\n  let monthlyPayable = Math.floor((loanAmount*length*rateOfInt)/(length-1));\r\n  return monthlyPayable;\r\n}\r\n\r\n\r\n\r\nclass Frontpage extends React.Component{\r\n   constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loanAmount: '',\r\n      tenure: '',\r\n      rateOfInt: '',\r\n      monthlyEmiAmount: ''\r\n    }\r\n    this.calculateEmi = this.calculateEmi.bind(this);\r\n    this.inputHandleChange = this.inputHandleChange.bind(this);\r\n  }\r\n  inputHandleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  calculateEmi = (e) => {\r\n    e.preventDefault();\r\n    \r\n     const loanAmount=this.state.loanAmount;\r\n     const tenure=this.state.tenure;\r\n     const rateOfInt=this.state.rateOfInt;\r\n     \r\n    this.setState({\r\n      monthlyEmiAmount: monthlyEmi(loanAmount, rateOfInt, tenure),\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const loanAmount=this.state.loanAmount;\r\n     const tenure=this.state.tenure;\r\n     const monthlyEmiAmount=this.state.monthlyEmiAmount;\r\n        let resultNumbers = {}\r\n\r\n\r\n     const totalAmt = Math.floor(monthlyEmiAmount ? monthlyEmiAmount * (tenure*12) : 0);\r\n    const interestAmt = Math.floor(totalAmt ? totalAmt - loanAmount : 0);\r\n\r\n     resultNumbers = Object.assign(resultNumbers, {\r\n      loanAmt: loanAmount,\r\n      formatMonthlyEmi:monthlyEmiAmount,\r\n      formatTotalAmt: totalAmt,\r\n      formatinterestAmt:interestAmt\r\n    })\r\n\r\n    return(\r\n      <React.Fragment>\r\n      <h3>EMI Calculator </h3>\r\n      <h6>Developed By Sunny Gupta </h6>\r\n       <div class=\"container-fluid\">\r\n         <div class=\"row\">\r\n           <div class=\"col-sm-6\">\r\n               <form class=\"form\">\r\n                    \r\n                    <TextField id=\"outlined-basic\"label=\"Enter_LoanAmount\" color=\"secondary\" name=\"loanAmount\" onChange={this.inputHandleChange}/><br/>\r\n                    <TextField id=\"standard-secondary\" label=\"Enter_Tenure(Years)\" color=\"secondary\" name=\"tenure\" onChange={this.inputHandleChange} /><br/>\r\n                     <TextField id=\"standard-secondary\" label=\"Enter_RateofInt(%)\" color=\"secondary\" name=\"rateOfInt\" onChange={this.inputHandleChange}/>\r\n                  \r\n                     <div class=\"operation-btns\">\r\n                  <Button variant=\"contained\" color=\"primary\" onClick={this.calculateEmi}> Calculate </Button>\r\n                      </div>\r\n               </form>  \r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n              <div id=\"result\">\r\n                <h2><span class=\"badge badge-success\">LoanAmount(Rs):{loanAmount}</span></h2>\r\n                <h2><span class=\"badge badge-success\">Monthly_Emi(Rs):{monthlyEmiAmount}</span></h2>\r\n                <h2><span class=\"badge badge-success\">Interest_Amount Payable(Rs):{interestAmt}</span></h2>\r\n                <h2><span class=\"badge badge-success\">Total_Amount_Payable(Rs):{totalAmt}</span></h2>\r\n             </div>\r\n            </div>\r\n         </div>\r\n       </div>\r\n      </React.Fragment>\r\n     )\r\n  }\r\n}\r\nexport default Frontpage;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Frontpage from './Components/frontend/frontpage';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    <Router>\n     <Route exact path={'/'} component={Frontpage} />\n     </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}